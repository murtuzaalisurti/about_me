---
import ogs from "open-graph-scraper";
import { calcDuration } from "../utils/calcDuration"

interface Props {
    list: {
        id: string;
        title: string;
        link: string;
        startDate: string;
        endDate: string;
        role: string[];
        showcase?: {
            id: string;
            link: string;
            image?: string[];
            title?: string;
        }[];
    }[];
}

const { list } = Astro.props;

for (const [i, block] of list.entries()) {
    if (block.showcase) {
        for (const [j, obj] of block.showcase.entries()) {
            const { error, result } = await ogs({
                url: obj.link,
            });

            if (error) {
                console.log(error);
                return;
            }

            if (result.success) {
                obj.title = result.ogTitle;
                obj.image =
                    result.ogImage && result.ogImage.map((img) => img.url);
            }
        }
    }
}
---

<div class="experience-data" data-experiences={JSON.stringify(list)}>
    {
        list.map((block) => {
            const duration = calcDuration(block.startDate, block.endDate);
            return (
                <div id={`${block.id}`}>
                    <div class="data-box">
                        <div class="timeline">
                            <div class="line" />
                            <div class="point" />
                        </div>
                        <div class="data">
                            <div class="role">
                                {block.link ? (
                                    <h4>
                                        <a
                                            rel="noreferrer"
                                            target="_blank"
                                            href={block.link}
                                        >
                                            {block.title}
                                        </a>
                                    </h4>
                                ) : (
                                    <h4>{block.title}</h4>
                                )}
                            </div>
                            <p class="time" id="duration">
                                {duration.html}
                            </p>
                            {
                                block.role.map(point => {
                                    return (
                                        <p class="exp-desc">{point}</p>
                                    )
                                })
                            }
                            <div class="showcase-container">
                                {block.showcase &&
                                    block.showcase.map((item) => {
                                        return (
                                            <div class="showcase">
                                                {item.image && (
                                                    <div class="link-preview">
                                                        <img
                                                            class="link-preview-img"
                                                            src={item.image[0]}
                                                            alt={item.title}
                                                        />
                                                        <div class="link-text">
                                                            <a href={item.link}>
                                                                {item.title} -{" "}
                                                                {
                                                                    new URL(
                                                                        item.link
                                                                    ).host
                                                                }
                                                            </a>
                                                        </div>
                                                    </div>
                                                )}
                                            </div>
                                        );
                                    })}
                            </div>
                        </div>
                    </div>
                </div>
            );
        })
    }
</div>

<script>
    /**
     * ? client side script to update the experience duration on every page load
     */
    import { calcDuration } from "../utils/calcDuration";

    const experienceListStringified = (document.querySelector(".experience-data") as HTMLElement).dataset.experiences;
    const experienceList = experienceListStringified && JSON.parse(experienceListStringified);

    for (const exp of experienceList) {
        const duration = calcDuration(exp.startDate, exp.endDate);
        const durationHTML = document.querySelector(`#${exp.id} #duration`) as HTMLElement;
        durationHTML.innerHTML = duration.html;
    }
</script>
