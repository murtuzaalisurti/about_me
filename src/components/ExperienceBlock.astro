---
import ogs from "open-graph-scraper";
import { groupExperienceByCompany } from "../lib/utils/groupExperienceByCompany";
import { capitalize } from "../lib/utils/common";
import type { Experiences } from "../lib/types";

interface Props extends Experiences {}

const { list } = Astro.props;

for (const [i, block] of list.entries()) {
    if (block.showcase) {
        for (const [j, obj] of block.showcase.entries()) {
            const { error, result } = await ogs({
                url: obj.link,
            });

            if (error) {
                console.log(error);
                return;
            }

            if (result.success) {
                obj.title = result.ogTitle;
                obj.image =
                    result.ogImage && result.ogImage.map((img) => img.url);
            }
        }
    }
}

const groupByCompany = groupExperienceByCompany(list);
---

<div class="experience-data" data-experiences={JSON.stringify(list)}>
    {
        Object.keys(groupByCompany).map((company) => {
            const expByCompany = groupByCompany[company];
            return (
                <div id={company} data-company={company}>
                    <div class="data-box">
                        <div class="timeline">
                            <div class="line" />
                            <div class="point" />
                        </div>
                        <div class="data">
                            {expByCompany.map((block: Props["list"][0], i) => {
                                return (
                                    <div id={block.id} class="experience">
                                        {i === 0 && expByCompany.length > 1 && (
                                            <div class="companyDuration">
                                                <p>
                                                    {
                                                        expByCompany[0]
                                                            .companyDuration
                                                            ?.html
                                                    }
                                                    -{" "}
                                                    {capitalize(block.company)}
                                                </p>
                                            </div>
                                        )}
                                        <div class="role">
                                            {block.link ? (
                                                <h4>
                                                    <a
                                                        rel="noreferrer"
                                                        target="_blank"
                                                        href={block.link}
                                                    >
                                                        {block.title}
                                                    </a>
                                                </h4>
                                            ) : (
                                                <h4>{block.title}</h4>
                                            )}
                                        </div>
                                        <p class="time" id="duration">
                                            {block.roleDuration &&
                                                block.roleDuration.html}
                                        </p>
                                        {block.role.map((point) => {
                                            return (
                                                <p class="exp-desc">{point}</p>
                                            );
                                        })}
                                        {block.showcase && (
                                            <div class="showcase-container">
                                                {block.showcase.map((item) => {
                                                    return (
                                                        <div class="showcase">
                                                            {item.image && (
                                                                <div class="link-preview">
                                                                    <img
                                                                        class="link-preview-img"
                                                                        src={
                                                                            item
                                                                                .image[0]
                                                                        }
                                                                        alt={
                                                                            item.title
                                                                        }
                                                                    />
                                                                    <div class="link-text">
                                                                        <a
                                                                            href={
                                                                                item.link
                                                                            }
                                                                        >
                                                                            {
                                                                                item.title
                                                                            }{" "}
                                                                            -{" "}
                                                                            {
                                                                                new URL(
                                                                                    item.link
                                                                                )
                                                                                    .host
                                                                            }
                                                                        </a>
                                                                    </div>
                                                                </div>
                                                            )}
                                                        </div>
                                                    );
                                                })}
                                            </div>
                                        )}
                                    </div>
                                );
                            })}
                        </div>
                    </div>
                </div>
            );
        })
    }
</div>

<script>
    /**
     * ? client side script to update the experience duration on every page load
     */
    import { calcDuration } from "../lib/utils/calcDuration";
    import { groupExperienceByCompany } from "../lib/utils/groupExperienceByCompany";
    import { capitalize } from "../lib/utils/common";

    const experienceListStringified = (
        document.querySelector(".experience-data") as HTMLElement
    ).dataset.experiences;
    const experienceList =
        experienceListStringified && JSON.parse(experienceListStringified);

    const expListAfterRecalculatingRoleDuration = experienceList.map(
        (exp: Record<string, any>) => {
            const roleDuration = calcDuration(exp.startDate, exp.endDate);
            return {
                ...exp,
                roleDuration,
            };
        }
    );

    for (const exp of expListAfterRecalculatingRoleDuration) {
        const durationHTML = document.querySelector(
            `#${exp.id} #duration`
        ) as HTMLElement;
        durationHTML.innerHTML = exp.roleDuration.html;
    }

    const groupByCompany = groupExperienceByCompany(
        expListAfterRecalculatingRoleDuration
    );

    for (const company in groupByCompany) {
        const expByCompany = groupByCompany[company];
        const companyDuration = document.querySelector(
            `div[data-company="${company}"] .companyDuration p`
        ) as HTMLElement;
        if (!companyDuration) continue;
        companyDuration.innerHTML = expByCompany[0].companyDuration
            ? `${expByCompany[0].companyDuration.html} - ${capitalize(company)}`
            : "";
    }
</script>
