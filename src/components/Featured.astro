---
import { URL } from "node:url";
import { google } from "googleapis";
import ogs from "open-graph-scraper";
import type { SuccessResult } from "open-graph-scraper/types";

type BaseItem = {
    id: string;
    link: string;
};

type Item = BaseItem & SuccessResult["result"];

interface Props {
    list: Item[];
}

const { list } = Astro.props;

const youtubeFeaturedItems = list.filter((item) =>
    item.link.includes("youtube.com")
);

const youtubeAPI = await google.youtube("v3").videos.list({
    key: import.meta.env.GOOGLE_API_KEY,
    id: youtubeFeaturedItems
        .map((item) => new URL(item.link).searchParams.get("v"))
        .filter((item) => item) as string[],
    part: ["snippet"],
});

for (let [_, item] of youtubeFeaturedItems.entries()) {
    const snippet = youtubeAPI.data.items?.find((i) =>
        item.link.includes(i.id as string)
    )?.snippet;
    item = {
        ...item,
        ogTitle: snippet?.title as string,
        ogImage: [
            {
                url: snippet?.thumbnails?.medium?.url as string,
            },
        ],
    };
    youtubeFeaturedItems[_] = item;
}

const otherItems = list.filter((item) => !item.link.includes("youtube.com"));

for (let [_, item] of otherItems.entries()) {
    const { error, result } = await ogs({
        url: item.link,
    });

    if (error) {
        console.log(error);
        return;
    }

    if (result.success) {
        Object.keys(result).forEach((key) => {
            const typedKey = key as keyof typeof item & keyof typeof result;
            item = {
                ...item,
                [typedKey]: result[typedKey],
            };
        });
        otherItems[_] = item;
    }
}

const parsedList = youtubeFeaturedItems.concat(otherItems);
---

<div class="showcase-container">
    {
        parsedList.map((item) => {
            return (
                <div class="showcase">
                    <div class="link-preview">
                        <img
                            class="link-preview-img"
                            src={item.ogImage?.[0].url}
                            alt={item.ogTitle}
                        />
                        <div class="link-text">
                            <a href={item.link}>{item.ogTitle}</a>
                            <p class="host">
                                {new URL(item.link).host
                                    .replaceAll(new RegExp("w", "gi"), "")
                                    .slice(1)}
                            </p>
                        </div>
                    </div>
                </div>
            );
        })
    }
</div>
